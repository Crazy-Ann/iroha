@startuml
skinparam classAttributeIconSize 0

package libiroha.object.common {
  class Domain
  class Username
  class Asset
  class AssetId
  class AccountId
  class Signature
  class StringSerializableFace
  class ObjectFace
  class Message
  class Amount
  class Address
  class Identity

/'
  AssetId ---> Asset
  AssetId ---> Domain
  AccountId ---> Username
  AccountId ---> Domain
'/
  ' inheritance
  StringSerializableFace <|-- Domain
  StringSerializableFace <|-- Asset
  StringSerializableFace <|-- Username
  StringSerializableFace <|-- AccountId
  StringSerializableFace <|-- AssetId

  ' inheritance
  Signature -|> ObjectFace
  Domain ---|> ObjectFace
  Username ---|> ObjectFace
  Asset ---|> ObjectFace
  AccountId ---|> ObjectFace
  Address ---|> ObjectFace
  Amount ---|> ObjectFace
  Identity ---|> ObjectFace
}

package libiroha.object.query {
  class Query
  class GetAccount
  class GetAccountAssetTransactions
  class GetRolePermissions
  class GetAssetInfo
  class GetSignatories
  class GetAccountAssets
  class GetAccountTransactions

  GetAccount ---|> Query
  GetSignatories ---|> Query
  GetAccountTransactions ---|> Query
  GetAccountAssetTransactions ---|> Query
  GetAccountAssets ---|> Query
  GetAssetInfo ---|> Query
  GetRolePermissions ---|> Query
  Query ---|> Message
}

package libiroha.object.transaction {
  class Transaction
  class AddAssetQuantity
  class AddPeer
  class AddSignatory
  class CreateAsset
  class CreateAccount
  class CreateDomain
  class RemoveSignatory
  class SetAccountPermissions
  class SetAccountQuorum
  class TransferAsset
  class AppendRole
  class CreateRole
  class GrantPermission
  class RevokePermission

  Transaction ---|> Message
  AddAssetQuantity ---|> Transaction
  AddPeer ---|> Transaction
  AddSignatory ---|> Transaction
  CreateAsset ---|> Transaction
  CreateAccount ---|> Transaction
  CreateDomain ---|> Transaction
  RemoveSignatory ---|> Transaction
  SetAccountPermissions ---|> Transaction
  SetAccountQuorum ---|> Transaction
  TransferAsset ---|> Transaction
  AppendRole ---|> Transaction
  CreateRole ---|> Transaction
  GrantPermission ---|> Transaction
  RevokePermission ---|> Transaction
}


' derived classes can be converted to string
abstract class StringSerializableFace {
  + {abstract} std::string to_string() = 0;
}

' derived classes can be validated and constructed'
abstract class ObjectFace <Type, T...> {
  + {abstract} {static} Result<Type, Type::Error> from(T...) = 0;
  + {abstract} {static} bool is_valid(T...) = 0;
}

class Domain {
  + {static} Result<Domain, Domain::Error> from(std::string);
  + {static} bool is_valid(std::string);
  + std::string to_string();
}

class Address {
  + {static} Result<Address, Address::Error> from(std::string ip, short port);
  + {static} bool is_valid(std::string ip, uint16_t port);
  + std::string ip();
  + uint16_t port();
}

class Signature {
  + {static} Result<Signature, Signature::Error> from(std::string pub, std::string sig);
  + {static} bool is_valid(std::string pub, std::string sig)
  + pubkey_t pubkey();
  + sig_t signature();
}

class Username {
  + {static} Result<Username, Username::Error> from(std::string);
  + {static} bool is_valid(std::string);
  + std::string to_string();
}

class Asset {
  + {static} Result<Asset, Asset::Error> from(std::string);
  + {static} bool is_valid(std::stirng);
  + std::string to_string();
}

class AccountId {
  + {static} AccountId from(Account, Domain);
  + {static} Result<AccountId, AccountId::Error> from(std::string, std::string);
  + Username username();
  + Domain domain();
  + std::string to_string();
}

class AssetId {
  + {static} Assetid from(Asset, Domain);
  + {static} Result<AssetId, AssetId::Error> from(std::string, std::string);
  + Asset asset();
  + Domain domain();
  std::string to_string();
}

class Message {
  + AccountId creator();
  + ts64_t timestamp();
  + hash256_t hash();
  + uint64_t counter();
}


'''''' QUERY
class Query {
  + Signature signature();
}


class GetAccount {
  + GetAccount(std::string account_id);
  + AccountId accound_id();
}

class GetSignatories {
  + GetSignatories (std::string account_id);
  + AccountId account_id();
}

class GetAccountTransactions {
  + GetAccountTransactions (std::string account_id);
  + AccountId account_id();
}

class GetAccountAssetTransactions {
  + GetAccountAssetTransactions (std::string account_id, std::string asset_id);
  + AccountId account_id();
  + AssetId asset_id();
}

class GetAccountAssets {
  + GetAccountAssets (std::string account_id, std::string asset_id);
  + AccountId account_id();
  + AssetId asset_id();
}

class GetAssetInfo {
  + GetAssetInfo(std::string asset_id);
  + AssetId asset_id();
}

class GetRolePermissions {
  + GetRolePermissions(std::string role_perm);
  + std::string role_id();
}



'''''' TRANSACTION
class Transaction {
  + std::vector<Signature> signatures();
}

class AddAssetQuantity {
  + AddAssetQuantity(std::string, std::string, boost::multiprecision::cpp_dec_float);
  + AccountId account();
  + AssetId asset();
  + Amount amount();
}

class AddPeer {
  + AddPeer(std::string address, std::string key);
  + Address address();
  + Identity identity();
}

class AddSignatory {
  + AddSignatory(std::string username, std::string domain, std::string pubk);
  + AddSignatory(AccountId, pubkey_t);
  + AccountId account();
  + pubkey_t pubkey();
}

class CreateAsset {
  + AssetId asset();
  + uint8_t precision();
}


@enduml
